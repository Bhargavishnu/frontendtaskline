{"ast":null,"code":"var _jsxFileName = \"/Users/bhargavcn/taskboardproject/src/components/Dashboard.js\";\nimport React from 'react';\nimport Navbar from './Navbar';\nimport TaskCard from './TaskCard'; //const taskcards = () => {\n//    const fetchurl = \"https://task-line.herokuapp.com/user/rahul/tasks/all?key=eyJhbGciOiJIUzI1NiJ9.eyJpZCI6InJhaHVsIiwibmFtZSI6InJhaHVsIiwicm9sZSI6ImFkbWluIn0.tYUgIZXi8V4Twq_QdPC1rsfMltaqmCwZRUYhmp8hiEY\"\n//        var responseCode = 0;\n//        var taskArray = [];\n//        var j=0\n//        fetch(fetchurl)\n//        .then(res => \n//              { \n//            responseCode = res.status;\n//      \n//                if (responseCode == 200 )\n//                    {\n//                        return res.json(); \n//                    }\n//              })\n//        .then( data => \n//              {\n//                    if ( data )\n//                        {\n//                            for( var i=0; i<data.length; i++)\n//                                {\n//                                    if (data[i][\"progress\"] == \"to do\")\n//                                        {\n//                                            var taskName = data[i][\"name\"];\n//                                            var taskReport = data[i][\"report_to\"];\n//                                            var taskPriority = data[i][\"priority\"];\n//                                            var taskDue = data[i][\"due_date\"];\n//                                            \n//                                            taskArray.push(\n//                                                <TaskCard key={j} name={taskName} reporter={taskReport} priority={taskPriority} due={taskDue} /> \n//                                                          );\n//                                            j++;\n//                                            \n//                                        }\n//                           \n//                                }\n//                        }\n//                    else\n//                    {\n//                        alert(\"Cannot Fetch Data Try Later!!\");\n//                    }\n//            });\n//         \n//        return (\n//        /*<div>\n//        <div className=\"col-lg-3 col-lg-offset-0 col-md-3 col-sm-5 col-xs-10\" id=\"task-card\">\n//            <h4 className=\"text-left team-card-title\">Task A</h4>\n//            <p>To-Do : 11/12 </p>\n//            <span className=\"label label-primary\">Priority </span>\n//            <p>To-DO</p>\n//            <span className=\"label label-warning\">Deadline </span>\n//            <p>12/01/2020 </p>\n//            <span className=\"label label-primary\">Current Progress </span>\n//            <div className=\"progress\">\n//                <div className=\"progress-bar progress-bar-info\" aria-valuenow=\"90\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{width: \"90%\"}} >90%</div>\n//            </div>\n//        </div> */\n//            <div>{taskArray}</div>\n//          \n//        )\n//}\n\nclass Taskcards extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskArray: []\n    };\n  }\n\n  componentDidMount() {\n    const fetchurl = \"https://task-line.herokuapp.com/user/admin/tasks/all?key=eyJhbGciOiJIUzI1NiJ9.eyJpZCI6ImFkbWluIiwibmFtZSI6ImFkbWluIiwicm9sZSI6ImFkbWluIn0.TMAU4Ba9MQn3yY8QwtH2Bl6ANdRYSqppfYUAih63RSE\";\n    var responseCode = 0;\n    var taskArray = [];\n    var j = 0;\n    fetch(fetchurl).then(res => {\n      responseCode = res.status;\n\n      if (responseCode == 200) {\n        return res.json();\n      }\n    }).then(data => {\n      if (data) {\n        for (var i = 0; i < data.length; i++) {\n          if (data[i][\"progress\"] == \"to do\") {\n            var taskName = data[i][\"name\"];\n            var taskReport = data[i][\"report_to\"];\n            var taskPriority = data[i][\"priority\"];\n            var taskDue = data[i][\"due_date\"];\n            taskArray.push(React.createElement(TaskCard, {\n              key: j,\n              name: taskName,\n              reporter: taskReport,\n              priority: taskPriority,\n              due: taskDue,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            }));\n            j++;\n          }\n        }\n\n        this.setState({\n          taskArray\n        });\n      } else {\n        alert(\"Cannot Fetch Data Try Later!!\");\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.taskArray);\n  }\n\n}\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.footerLast = this.footerLast.bind(this);\n    this.render = this.render.bind(this);\n    this.changeMode = this.changeMode.bind(this);\n    this.state = {\n      mode: \"mytasks\",\n      baseURL: this.props.location.state.baseURL,\n      authToken: this.props.location.state.authToken,\n      uid: this.props.location.state.uid\n    };\n  }\n\n  changeMode(modeName) {\n    var downIcons = document.getElementsByClassName(\"down-icon-items\");\n\n    if (this.state.mode == modeName) {\n      return;\n    }\n\n    for (var i = 0; i < downIcons.length; i++) {\n      downIcons[i].setAttribute(\"id\", \"\");\n    }\n\n    if (modeName == \"teams\") {\n      downIcons[0].setAttribute(\"id\", \"present-page\");\n      this.setState({\n        mode: modeName\n      });\n    } else if (modeName == \"mytasks\") {\n      downIcons[1].setAttribute(\"id\", \"present-page\");\n      this.setState({\n        mode: modeName\n      });\n    } else if (modeName == \"archives\") {\n      downIcons[2].setAttribute(\"id\", \"present-page\");\n      this.setState({\n        mode: modeName\n      });\n    } else {\n      console.log(\"cannot set mode\");\n    }\n  }\n\n  footerLast() {\n    return React.createElement(\"footer\", {\n      className: \"down-nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-lg-5 col-lg-offset-1 col-md-12 down-icon-items\",\n      onClick: () => this.changeMode(\"teams\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-slideshare left-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Teams \")), React.createElement(\"div\", {\n      className: \"col-lg-5 col-lg-offset-1 col-md-12 down-icon-items\",\n      id: \"present-page\",\n      onClick: () => this.changeMode(\"mytasks\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-tasks left-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"My Tasks\")), React.createElement(\"div\", {\n      className: \"col-lg-5 col-lg-offset-1 col-md-12 down-icon-items\",\n      onClick: () => this.changeMode(\"archives\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-history left-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Archives \")));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      id: \"main-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, this.state.mode), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"text-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Pending \"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row task-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"task-cards-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Taskcards, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    })))))), this.footerLast());\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/bhargavcn/taskboardproject/src/components/Dashboard.js"],"names":["React","Navbar","TaskCard","Taskcards","Component","constructor","props","state","taskArray","componentDidMount","fetchurl","responseCode","j","fetch","then","res","status","json","data","i","length","taskName","taskReport","taskPriority","taskDue","push","setState","alert","render","Dashboard","footerLast","bind","changeMode","mode","baseURL","location","authToken","uid","modeName","downIcons","document","getElementsByClassName","setAttribute","console","log","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from './Navbar';\nimport TaskCard from './TaskCard'\n\n//const taskcards = () => {\n//    const fetchurl = \"https://task-line.herokuapp.com/user/rahul/tasks/all?key=eyJhbGciOiJIUzI1NiJ9.eyJpZCI6InJhaHVsIiwibmFtZSI6InJhaHVsIiwicm9sZSI6ImFkbWluIn0.tYUgIZXi8V4Twq_QdPC1rsfMltaqmCwZRUYhmp8hiEY\"\n//        var responseCode = 0;\n//        var taskArray = [];\n//        var j=0\n//        fetch(fetchurl)\n//        .then(res => \n//              { \n//            responseCode = res.status;\n//      \n//                if (responseCode == 200 )\n//                    {\n//                        return res.json(); \n//                    }\n//              })\n//        .then( data => \n//              {\n//                    if ( data )\n//                        {\n//                            for( var i=0; i<data.length; i++)\n//                                {\n//                                    if (data[i][\"progress\"] == \"to do\")\n//                                        {\n//                                            var taskName = data[i][\"name\"];\n//                                            var taskReport = data[i][\"report_to\"];\n//                                            var taskPriority = data[i][\"priority\"];\n//                                            var taskDue = data[i][\"due_date\"];\n//                                            \n//                                            taskArray.push(\n//                                                <TaskCard key={j} name={taskName} reporter={taskReport} priority={taskPriority} due={taskDue} /> \n//                                                          );\n//                                            j++;\n//                                            \n//                                        }\n//                           \n//                                }\n//                        }\n//                    else\n//                    {\n//                        alert(\"Cannot Fetch Data Try Later!!\");\n//                    }\n//            });\n//         \n//        return (\n//        /*<div>\n//        <div className=\"col-lg-3 col-lg-offset-0 col-md-3 col-sm-5 col-xs-10\" id=\"task-card\">\n//            <h4 className=\"text-left team-card-title\">Task A</h4>\n//            <p>To-Do : 11/12 </p>\n//            <span className=\"label label-primary\">Priority </span>\n//            <p>To-DO</p>\n//            <span className=\"label label-warning\">Deadline </span>\n//            <p>12/01/2020 </p>\n//            <span className=\"label label-primary\">Current Progress </span>\n//            <div className=\"progress\">\n//                <div className=\"progress-bar progress-bar-info\" aria-valuenow=\"90\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{width: \"90%\"}} >90%</div>\n//            </div>\n//        </div> */\n//            <div>{taskArray}</div>\n//          \n//        )\n//}\n\nclass Taskcards extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            taskArray: []\n        }\n    }\n    \n    componentDidMount() {\n        const fetchurl = \"https://task-line.herokuapp.com/user/admin/tasks/all?key=eyJhbGciOiJIUzI1NiJ9.eyJpZCI6ImFkbWluIiwibmFtZSI6ImFkbWluIiwicm9sZSI6ImFkbWluIn0.TMAU4Ba9MQn3yY8QwtH2Bl6ANdRYSqppfYUAih63RSE\"\n            var responseCode = 0;\n            var taskArray = [];\n            var j=0\n            fetch(fetchurl)\n            .then(res => \n                  { \n                responseCode = res.status;\n\n                    if (responseCode == 200 )\n                        {\n                            return res.json(); \n                        }\n                  })\n            .then( data => \n                  {\n                        if ( data )\n                            {\n                                for( var i=0; i<data.length; i++)\n                                    {\n                                        if (data[i][\"progress\"] == \"to do\")\n                                            {\n                                                var taskName = data[i][\"name\"];\n                                                var taskReport = data[i][\"report_to\"];\n                                                var taskPriority = data[i][\"priority\"];\n                                                var taskDue = data[i][\"due_date\"];\n\n                                                taskArray.push(\n                                                    <TaskCard key={j} name={taskName} reporter={taskReport} priority={taskPriority} due={taskDue} /> \n                                                              );\n                                                j++;\n\n                                            }\n\n                                    }\n                                                this.setState({taskArray});\n                            }\n\n                        else\n                        {\n                            alert(\"Cannot Fetch Data Try Later!!\");\n                        }\n                });\n         \n    }\n    \n    render() {\n        return <div>{this.state.taskArray}</div>\n    }\n}\n\nclass Dashboard extends React.Component{\n   \n    constructor(props)\n    {\n        super(props);\n        this.footerLast = this.footerLast.bind(this);\n        this.render = this.render.bind(this);\n        this.changeMode = this.changeMode.bind(this);\n        this.state={mode: \"mytasks\", baseURL: this.props.location.state.baseURL , authToken : this.props.location.state.authToken , uid : this.props.location.state.uid};\n        \n    }\n    \n    changeMode(modeName)\n    {\n        var downIcons = document.getElementsByClassName(\"down-icon-items\");\n        if (this.state.mode == modeName )\n            {\n                return\n            }\n        for (var i=0;i<downIcons.length;i++)\n            {\n                downIcons[i].setAttribute(\"id\",\"\");\n            }\n        if ( modeName==\"teams\" )\n        {\n            downIcons[0].setAttribute(\"id\",\"present-page\");\n           this.setState({mode: modeName});\n        }\n        else if ( modeName==\"mytasks\" )\n        {\n            downIcons[1].setAttribute(\"id\",\"present-page\");\n            this.setState({mode: modeName});\n         \n        }\n        else if ( modeName==\"archives\" )\n        {\n            downIcons[2].setAttribute(\"id\",\"present-page\");\n           this.setState({mode: modeName});\n            \n            \n        }\n        else{\n            console.log(\"cannot set mode\")\n        }\n        \n    }\n    \n    footerLast() \n    {\n        \n         return(\n        <footer className=\"down-nav\">\n    \n        <div className=\"col-lg-5 col-lg-offset-1 col-md-12 down-icon-items\" onClick={() => this.changeMode(\"teams\")}><i className=\"fa fa-slideshare left-icons\"></i>\n            <p className=\"text-center\">Teams </p>\n        </div>\n        <div className=\"col-lg-5 col-lg-offset-1 col-md-12 down-icon-items\" id=\"present-page\" onClick={() => this.changeMode(\"mytasks\")} ><i className=\"fa fa-tasks left-icons\"></i>\n            <p className=\"text-center\">My Tasks</p>\n        </div>\n        <div className=\"col-lg-5 col-lg-offset-1 col-md-12 down-icon-items\" onClick={() => this.changeMode(\"archives\")} ><i className=\"fa fa-history left-icons\"></i>\n            <p className=\"text-center\">Archives </p>\n        </div>\n\n        </footer> \n         );\n        \n                    \n    }\n    \n    \n\n\n\n    render()\n    {\n       \n        return(\n            <div style={{backgroundColor:\"white\"}}>\n                <Navbar></Navbar>\n            <div className=\"row\" id=\"main-row\">\n                <div className=\"col-md-12\">\n                    <h3>{this.state.mode}</h3>\n                    <hr />\n                </div>\n            <div className=\"col-md-12\">\n                <h5 className=\"text-info\">Pending </h5>\n                <hr />\n                <div className=\"row task-row\">\n                    <div className=\"col-md-12\">\n                        <div className=\"task-cards-container\">\n                            <Taskcards />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            </div>\n            \n                {this.footerLast()}\n             </div>\n        );\n    }\n    \n}\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}